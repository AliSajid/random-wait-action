# SPDX-FileCopyrightText: 2022 - 2025 Ali Sajid Imami
#
# SPDX-License-Identifier: MIT

# mise configuration for Random Wait Action
# See: https://mise.jdx.dev/configuration.html

# =============================================================================
# Tool Version Management
# =============================================================================
# All development tools and their exact versions
# Run `mise install` to install all tools

[tools]
# Runtime (Node.js 22 for GitHub Actions compatibility)
node = "20.19.5"

# Package manager (locked version for consistency)
pnpm = "10.18.3"
"ubi:cocogitto/cocogitto" = { version = "v6.4.0", exe = "cog" }

# Python tools
python = "3.12"
pre-commit = "4.3.0"

# Documentation tooling
"cargo:mdbook" = "0.4.44"

# =============================================================================
# Environment Variables
# =============================================================================

[env]
# Node.js VM modules for ESM compatibility
NODE_OPTIONS = "--experimental-vm-modules"

# Development environment
NODE_ENV = "development"

# =============================================================================
# Task Definitions
# =============================================================================
# Run tasks with: mise run <task>
# List all tasks: mise tasks

# -----------------------------------------------------------------------------
# Development Tasks
# -----------------------------------------------------------------------------

[tasks.build]
description = "Build the GitHub Action distribution bundle"
run = "pnpm exec rollup --config rollup.config.ts --configPlugin @rollup/plugin-typescript"
depends = ["_install", "check:types"]

[tasks.package]
description = "Package the action using Rollup"
alias = "build"
run = "pnpm exec rollup --config rollup.config.ts --configPlugin @rollup/plugin-typescript"
depends = ["_install"]

[tasks.check]
description = "Run all checks (format, lint, types)"
depends = ["format:check", "lint:check", "check:types"]

[tasks."check:types"]
description = "Type-check TypeScript code"
run = "pnpm exec tsc --noEmit"
depends = ["_install"]

# -----------------------------------------------------------------------------
# Testing Tasks
# -----------------------------------------------------------------------------

[tasks.test]
description = "Run all unit tests"
run = "pnpm exec vitest --run"
depends = ["_install"]

[tasks."test:watch"]
description = "Run tests in watch mode"
run = "pnpm exec vitest"
depends = ["_install"]

[tasks."test:ui"]
description = "Run tests with Vitest UI"
run = "pnpm exec vitest --ui"
depends = ["_install"]

[tasks."test:coverage"]
description = "Run tests with coverage report"
run = "pnpm exec vitest --coverage"
depends = ["_install"]

[tasks."test:ci"]
description = "Run tests in CI mode (no watch)"
run = "pnpm exec vitest --run --reporter=verbose"
depends = ["_install"]

# -----------------------------------------------------------------------------
# Linting & Formatting Tasks
# -----------------------------------------------------------------------------

[tasks.lint]
description = "Run ESLint checks"
alias = "lint:check"
run = "pnpm exec eslint ."
depends = ["_install"]

[tasks."lint:check"]
description = "Check code with ESLint"
run = "pnpm exec eslint ."
depends = ["_install"]

[tasks."lint:fix"]
description = "Auto-fix ESLint issues"
run = "pnpm exec eslint . --fix"
depends = ["_install"]

[tasks.format]
description = "Format code with Prettier"
alias = "format:write"
run = "pnpm exec prettier --write '{src,docs}/**/*.{ts,js,json,md,yaml,yml}'"
depends = ["_install"]

[tasks."format:check"]
description = "Check code formatting without modifying files"
run = "pnpm exec prettier --check '{src,docs}/**/*.{ts,js,json,md,yaml,yml}'"
depends = ["_install"]

[tasks."format:write"]
description = "Format all source files with Prettier"
run = "pnpm exec prettier --write '{src,__tests__}/**/*.{ts,js,json,md,yaml,yml}'"
depends = ["_install"]

# -----------------------------------------------------------------------------
# Documentation Tasks
# -----------------------------------------------------------------------------

[tasks."docs:build"]
description = "Build mdBook documentation"
run = "mdbook build guide"

[tasks."docs:serve"]
description = "Serve mdBook documentation locally"
run = "mdbook serve guide --open"

[tasks."docs:watch"]
description = "Watch and rebuild documentation"
run = "mdbook watch guide"

[tasks."docs:clean"]
description = "Clean documentation build artifacts"
run = "mdbook clean guide"

[tasks."docs:test"]
description = "Test code samples in documentation"
run = "mdbook test guide"

# -----------------------------------------------------------------------------
# CI/CD Tasks
# -----------------------------------------------------------------------------

[tasks.ci]
description = "Run full CI pipeline locally (format, lint, test, build)"
depends = ["format:check", "lint:check", "check:types", "test", "build"]

[tasks.all]
description = "Run complete validation (same as CI + package)"
depends = ["format:check", "lint:check", "check:types", "test", "build"]

[tasks."check-dist"]
description = "Verify that dist/ is up-to-date with latest build"
run = """
#!/usr/bin/env bash
set -e

echo "üî® Building fresh distribution..."
pnpm exec rollup --config rollup.config.ts --configPlugin @rollup/plugin-typescript

echo "üîç Checking for changes..."
if [[ -n "$(git status --porcelain dist/)" ]]; then
  echo "‚ùå Distribution is out of date! Run 'mise run build' and commit the changes."
  git diff dist/
  exit 1
else
  echo "‚úÖ Distribution is up-to-date!"
fi
"""
depends = ["_install"]

# -----------------------------------------------------------------------------
# Utility Tasks
# -----------------------------------------------------------------------------

[tasks.clean]
description = "Clean all build artifacts and caches"
run = """
#!/usr/bin/env bash
echo "üßπ Cleaning build artifacts..."
rm -rf dist/
rm -rf coverage/
rm -rf node_modules/.vite
rm -rf .rollup.cache
rm -rf guide/book
echo "‚ú® Clean complete!"
"""

[tasks."clean:all"]
description = "Clean everything including node_modules"
run = """
#!/usr/bin/env bash
echo "üßπ Deep cleaning..."
rm -rf dist/
rm -rf coverage/
rm -rf node_modules/
rm -rf guide/book
rm -rf .rollup.cache
echo "‚ú® Deep clean complete! Run 'mise run setup' to reinstall."
"""

[tasks.setup]
description = "Complete project setup (install dependencies)"
depends = ["_install"]
run = """
#!/usr/bin/env bash
echo "‚úÖ Project setup complete!"
echo "Available commands:"
echo "  mise run dev        - Start development"
echo "  mise run test       - Run tests"
echo "  mise run build      - Build the action"
echo "  mise run ci         - Run full CI pipeline"
echo ""
echo "Run 'mise tasks' to see all available tasks."
"""

[tasks._install]
description = "Install Node.js dependencies with pnpm"
run = "pnpm install"

[tasks.update]
description = "Update all dependencies to latest versions"
run = """
#!/usr/bin/env bash
echo "üì¶ Updating dependencies..."
pnpm update --latest
echo "‚úÖ Dependencies updated! Review changes and test thoroughly."
"""

# -----------------------------------------------------------------------------
# Development Workflow Tasks
# -----------------------------------------------------------------------------

[tasks.dev]
description = "Start development mode (tests in watch mode)"
run = "pnpm exec vitest"
depends = ["_install"]

[tasks.pre-commit]
description = "Run pre-commit checks (format, lint, test)"
depends = ["format:check", "lint:check", "test"]

[tasks.pre-push]
description = "Run pre-push checks (full CI pipeline)"
depends = ["ci"]

# -----------------------------------------------------------------------------
# Action Testing Tasks
# -----------------------------------------------------------------------------

[tasks."action:test"]
description = "Test the action locally with default parameters"
run = """
#!/usr/bin/env bash
set -e

echo "üß™ Testing action with default parameters..."
INPUT_MINIMUM=1 INPUT_MAXIMUM=10 node dist/index.cjs
"""
depends = ["build"]

[tasks."action:test:custom"]
description = "Test the action with custom parameters (usage: mise run action:test:custom -- MIN MAX)"
run = """
#!/usr/bin/env bash
set -e

MIN=${1:-1}
MAX=${2:-10}

echo "üß™ Testing action with minimum=$MIN, maximum=$MAX..."
INPUT_MINIMUM=$MIN INPUT_MAXIMUM=$MAX node dist/index.cjs
"""
depends = ["build"]

# -----------------------------------------------------------------------------
# Information Tasks
# -----------------------------------------------------------------------------

[tasks.info]
description = "Display project and environment information"
run = """
#!/usr/bin/env bash

echo "=== Random Wait Action - Environment Info ==="
echo ""
echo "üì¶ Project Information:"
echo "  Name: random-wait-action"
echo "  Version: $(node -p "require('./package.json').version")"
echo "  License: MIT"
echo ""
echo "üõ†Ô∏è  Tool Versions:"
echo "  Node.js: $(node --version)"
echo "  pnpm: $(pnpm --version)"
echo "  TypeScript: $(pnpm exec tsc --version)"
echo "  mise: $(mise --version)"
echo ""
echo "üìÇ Git Information:"
echo "  Branch: $(git rev-parse --abbrev-ref HEAD)"
echo "  Commit: $(git rev-parse --short HEAD)"
echo "  Status: $(git status --short | wc -l | tr -d ' ') file(s) modified"
echo ""
echo "üîß Environment:"
echo "  NODE_ENV: ${NODE_ENV:-not set}"
echo "  NODE_OPTIONS: ${NODE_OPTIONS:-not set}"
echo ""
echo "üìä Project Stats:"
echo "  Source files: $(find src -name '*.ts' | wc -l | tr -d ' ')"
echo "  Test files: $(find __tests__ -name '*.test.ts' | wc -l | tr -d ' ')"
echo "  Dependencies: $(node -p "Object.keys(require('./package.json').dependencies).length")"
echo "  Dev Dependencies: $(node -p "Object.keys(require('./package.json').devDependencies).length")"
"""

[tasks.version]
description = "Display current project version"
run = "node -p \"require('./package.json').version\""

# -----------------------------------------------------------------------------
# Maintenance Tasks
# -----------------------------------------------------------------------------

[tasks."audit"]
description = "Run security audit on dependencies"
run = "pnpm audit"

[tasks."audit:fix"]
description = "Fix security vulnerabilities automatically"
run = "pnpm audit --fix"

[tasks.outdated]
description = "Check for outdated dependencies"
run = "pnpm outdated"
